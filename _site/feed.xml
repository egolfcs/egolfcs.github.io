<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-11T13:01:55-04:00</updated><id>http://localhost:4000/</id><title type="html">Egolfcs</title><subtitle></subtitle><entry><title type="html">Project Euler - Problem 2</title><link href="http://localhost:4000/pe/2" rel="alternate" type="text/html" title="Project Euler - Problem 2" /><published>2018-05-10T16:00:00-04:00</published><updated>2018-05-10T16:00:00-04:00</updated><id>http://localhost:4000/pe/Project-Euler-2</id><content type="html" xml:base="http://localhost:4000/pe/2">&lt;h1 id=&quot;project-euler-problem-2&quot;&gt;Project Euler Problem 2&lt;/h1&gt;

&lt;blockquote&gt;

  &lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:&lt;br /&gt;&lt;br /&gt;
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …&lt;br /&gt;&lt;br /&gt;
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: Project Euler chooses to start the sequence with 1, 2. Traditionally it is started with 1, 1, 2. This isn’t really an issue for this problem as this extra 1 is not even. I will use the 1, 1, 2 sequence as it makes some of the math a bit cleaner. It does not change the results though.&lt;/p&gt;

&lt;h2 id=&quot;naive-approach&quot;&gt;Naive Approach&lt;/h2&gt;

&lt;p&gt;The naive approach is to iterate over the sequence, adding the even numbers to a running total, until we reach our upper bound. That would look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibsum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This solution certainly works, but it is order O(lg n) as there are O(lg n) Fibonacci numbers less than n (this will be shown later). O(lg n) is great, but an O(lg lg n) solution is possible with some math.&lt;/p&gt;

&lt;h2 id=&quot;some-math&quot;&gt;Some Math&lt;/h2&gt;

&lt;p&gt;Lets put parentheses around the odd terms in the given sequence:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) + 2 + (3 + 5) + 8 + (13 + 21) + 34 + (55 + 89) + 144...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice that every third term in the sequence is even. Given the definition then of the Fibonacci sequence, each even number is going to be equal to the sum of the two previous odd numbers. From this it follows that the sum of the even numbers in the Fibonacci sequence is going to be equal to the sum of the odd numbers in the Fibonacci sequence. In other words, because all numbers in the sequence are either odd or even, the sum of the even numbers will be half the sum of all of the numbers. This is a truly beautiful result and gets us closer to an explicit solution to the problem.&lt;/p&gt;

&lt;p&gt;Note: if the last number in a partial sum is odd, we instead want to backtrack through the sequence until we find the first even number. For instance, if our upper bound is 33, we are only interested in the evens 2 and 8, but 13 and 21 would also be in the sequence. When we take the partial sum to 21, we have extra odd numbers that don’t have an even partner, in this case 34. Again, this can be remedied simply by backtracking until we find an even number.&lt;/p&gt;

&lt;p&gt;What we need now is to find an explicit formula for the sum of the first n Fibonacci numbers. Consider the following table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Sequence&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;th&gt;34&lt;/th&gt;
      &lt;th&gt;55&lt;/th&gt;
      &lt;th&gt;89&lt;/th&gt;
      &lt;th&gt;144&lt;/th&gt;
      &lt;th&gt;x&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Partial Sum&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;143&lt;/td&gt;
      &lt;td&gt;x-1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notice that it appears that the sum of the first n Fibonacci numbers is equal to the (n+2)th Fibonacci number, minus 1. This result can be verified via proof by induction. This fact reduces the problem to finding an explicit formula for the nth Fibonacci number.&lt;/p&gt;

&lt;p&gt;Such a formula exists. This formula isn’t trivial though, so I won’t reproduce the proof here. The formula is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fib(n) = ((Phi**n - (-phi)**n)/(5**0.5))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where Phi is the golden ratio &lt;code class=&quot;highlighter-rouge&quot;&gt;(1+5**0.5)*0.5&lt;/code&gt; and phi is Phi-1. (Notice the difference in Phi and phi). Because phi is less than 1, phi^n is also less than 1. Therefore, fib(n) is approximately &lt;code class=&quot;highlighter-rouge&quot;&gt;(Phi**n)/(5**0.5).&lt;/code&gt; We’re interested only in Fibonacci numbers less than fib(n) = 4,000,000. We can solve this approximation for n in order to find the index of the nearest Fibonacci number to x which is smaller than x. With some algebra we find that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n = floor(log(x*5**0.5)/log(Phi))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will give us the index of the number in the sequence closest to and less than or equal to our upper bound. This number may or may not be even. If this number is not even, we want to reduce the index n until fib(n) is even. If we don’t do this, the sum we calculate will have 1 or 2 odd numbers in it that do not correspond an even number, as discussed earlier.&lt;/p&gt;

&lt;h2 id=&quot;a-faster-approach&quot;&gt;A Faster Approach&lt;/h2&gt;

&lt;p&gt;Given all of this, we have arrived at a more efficient solution. Implementing these ideas we get something that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Phi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;approx_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nthfib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibsum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;approx_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nthfib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nthfib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;approx_n(x)&lt;/code&gt; function relies on the &lt;code class=&quot;highlighter-rouge&quot;&gt;log()&lt;/code&gt; function, which is O(lg lg x) at the very worst. The value from &lt;code class=&quot;highlighter-rouge&quot;&gt;approx_n(x)&lt;/code&gt; is O(lg x). This value is then plugged into &lt;code class=&quot;highlighter-rouge&quot;&gt;nthfib(n)&lt;/code&gt; which relies on exponentiation. Exponentiation can be done in O(lg n). Because n is O(lg x), &lt;code class=&quot;highlighter-rouge&quot;&gt;nthfib(n)&lt;/code&gt; itself is O(lg lg x). &lt;code class=&quot;highlighter-rouge&quot;&gt;nthfib(n)&lt;/code&gt; is run no more than 4 times, so the runtime complexity for the entire program is O(lg lg x).&lt;/p&gt;</content><author><name></name></author><summary type="html">Project Euler Problem 2</summary></entry><entry><title type="html">Project Euler - Problem 1</title><link href="http://localhost:4000/pe/1" rel="alternate" type="text/html" title="Project Euler - Problem 1" /><published>2018-05-09T16:00:00-04:00</published><updated>2018-05-09T16:00:00-04:00</updated><id>http://localhost:4000/pe/Project-Euler-1</id><content type="html" xml:base="http://localhost:4000/pe/1">&lt;h1 id=&quot;project-euler-problem-1&quot;&gt;Project Euler Problem 1&lt;/h1&gt;

&lt;blockquote&gt;

  &lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;br /&gt;&lt;br /&gt;
Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;naive-approach&quot;&gt;Naive Approach&lt;/h2&gt;

&lt;p&gt;The naive approach is to iterate over the numbers from 1 to 1000, check if each number is divisible by 3 or 5, and add that number to a running total if it is. That would look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sol1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works, but it isn’t the most efficient solution. In order to come to a solution this way, we must iterate over each number less than 1000. This solution is therefore O(n). This is perhaps the best we can do without using math, but we absolutely can do better.&lt;/p&gt;

&lt;h2 id=&quot;some-math&quot;&gt;Some Math&lt;/h2&gt;
&lt;p&gt;It is know that the sum of every number from 1 to n is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;n*(1+n)*0.5.&lt;/code&gt; This is not hard to prove. Consider the list:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1,2,3... 499, 501,... 997, 998, 999&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Take the sum of the pairs of the ends and move inwards such that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 + 999 = 2 + 998 = 3 + 997 = ...499+501 = 1000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are 499 pairs of numbers in the list which each sum to 1 + n with n = 999. We can map (n+1)/2, in this case 500, to each number in the pair. That is, if there are 499 pairs that add to 1000, we can “average out” this 1000 by assigning 500 to 998 numbers. Finally, observe that 500 was left by itself. This is the 999th 500. This is not a perfectly rigorous proof for the general formula, but hopefully it gives an intuition if you’ve never seen this before or is a sufficient refresher if you have.&lt;/p&gt;

&lt;h2 id=&quot;a-faster-approach&quot;&gt;A Faster Approach&lt;/h2&gt;

&lt;p&gt;Using this formula we can find &lt;code class=&quot;highlighter-rouge&quot;&gt;3 + 6 + 9... + ~n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;5 + 10 + 15... + ~n&lt;/code&gt; with ~n being the closest number to n which is a multiple of 3 or 5. By factoring out 3 and 5 we get&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3(1 + 2 + 3... + ~n/3)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;5(1 + 2 + 3... + ~n/5)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Conveniently, ~n/k is simply n/k by integer division, so we need not actually find ~n. Therefore, we can find n/k, plug it into our sum equation, and multiply the result by k to find the sum of integers less than n which are divisible by k.&lt;/p&gt;

&lt;p&gt;Using this method, we might sum all of the numbers divisible by 3 and then sum all of the numbers divisible by 5. We can then take those two sums and add them together. Notice though that numbers like 15, 30, 45… are divisible by both 3 and 5. Simply adding the two sums together will double count the numbers divisible by 15. This can be remedied by finding a third sum, that being the sum of the numbers divisible by 15. We can then subtract this sum from the double counting sum in order to adjust.&lt;/p&gt;

&lt;p&gt;Implementing these ideas might look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;linsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sol2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This solution will be O(1) with respect to n as each calculation of &lt;code class=&quot;highlighter-rouge&quot;&gt;linsum()&lt;/code&gt; is constant. There is no need to populate or iterate over a list using this approach.&lt;/p&gt;</content><author><name></name></author><summary type="html">Project Euler Problem 1</summary></entry></feed>